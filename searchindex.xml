<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>学习算法有什么用</title><url>https://yumc1991.github.io/blog.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8/</url><categories><category>JAVA</category></categories><tags><tag>算法</tag></tags><content type="html"> 背景 最近接了个小任务，需要做一个SQL解析工具，该SQL解析工具用于解决在版本迭代过程中，不同版本实体类之间字段变更后的SQL生成问题。
在实现的过程中，遇到了这样一个问题：比较2个json中的各个字段及其value是否相同，并且输出不同的key、value。
思路 遇事不决，先问百度/谷歌。
由于项目中采用的是阿里的fastjson，因此就去看了看有没有现成的api可以完成这个任务。答案是，没有。
接下来，看看有没有造好的轮子可以用，找了找之后，就发现这篇里提到的有可取之处：https://www.jianshu.com/p/abd00a69f081
但是仔细看了之后又发现，和我们的需求并不相符。不过思路就此清晰了起来，简单来说就是：递归+回溯。
通过递归+回溯拿到源json和目的json的全部字段，分别存入2个Map中。其中，Map的key是json中某个key的全路径 遍历目的Map，判断其中的各个key在源Map是否存在，若存在，则比较value，若不存在则为新增。 详细 这里首先解释一下为什么要用【递归+回溯】这种解法：
需要解析出大json中最底层的k:v，因此需要像剥洋葱一样把外层的皮一层一层剥开 又由于需要在拿到一个k:v后再去拿同级或上一级的k:v，因此还需要回溯 这里呢，就看出平时做算法题的好处了（虽然已经很久没做了~），leetcode上《剑指 Offer II 084. 含有重复元素集合的全排列》里就非常适配当前场景，同时题解里还非常贴心的给出了模板。接下来要做的，就是将模板套入到我们的场景中解决问题。
解答 核心代码包括dfsPath和backTrace两部分，其中dfsPath是用于对路径进行深度递归的，isEndPoint方法用来判断obj是否为基础数据类型，如果是则结束此分支递归。backTrace是回退路径。
由于json中可能包含基础数据类型、JSONObject类型和JSONArray类型，因此要区别对待。</content></entry><entry><title>Agent+ddd实战</title><url>https://yumc1991.github.io/blog.github.io/post/agent+ddd%E5%AE%9E%E6%88%98/</url><categories><category>JAVA</category></categories><tags><tag>功能实战</tag></tags><content type="html"/></entry><entry><title>性能调优</title><url>https://yumc1991.github.io/blog.github.io/post/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url><categories><category>JAVA</category></categories><tags><tag>性能调优</tag></tags><content type="html"> 背景 最近的工作中接触到了大量性能调优方面的事务，这些都是之前工作中从未接触过的，这里简单总结一下。
方法论 总体而言，性能调优分为两部分，分别是客户端性能调优和服务端性能调优（针对CS架构），如果是管理平台等BS架构类型的系统，客户端就是浏览器，就是前端调优，而后端可以做的事情相当的少，就是服务端的调优。
调优手段 就目前的知识储备而言，我所了解的调优基本上如同程咬金的3板斧一般。
劈脑袋之控制流量 鬼剔牙之线程池与连接池适配 掏耳朵之指标观测与参数调优 ok，下面分别针对上述3种方法进行详述。 控制流量 当我们驾驶汽车行驶在马路上时，经常会遇到红绿灯。除了规范交通，红绿灯更为主要的作用是进行限流，控制路上行驶的车流量，避免拥塞。在计算机的世界里，也是处处存在着拥塞控制，最经典的当属TCP里的滑动窗口设计。
那么，同理，如果将服务端的处理能力看成道路，将客户端发送过来的请求看成汽车，很明显，也需要比较好的流量控制。 流量控制的手段有很多，这里按类型划分为两类，客户端限量和服务端限流。
客户端限流就是控制客户端流入的流量，通过限制流入来限制流出。最常见的方式是漏桶算法和令牌桶算法，如果考虑分布式场景，可能还需要引入中间件或者自己实现一套分布式限流。当然，这里还有更简单的方式，直接在客户端的方法入口增加信号量限流，这样就可以实现客户端的水平扩展。
服务端限流并不是常规意义上在服务端代码中实现限流，而是和客户端限流类似，限制流入的流量。在客户端使用服务端连接池进行数据发送时，将大数据拆分成小数据进行发送。比如将原本10000条的全量数据拆分成40个250条的数据，这样做可以显著提升TPS。
线程池与连接池适配 在多核的世界里，多线程与线程池是提升性能的必备手段，通过引入多个线程并行处理，大大加快了处理速度。但是，线程数的设置也是很有讲究的。一般而言，会使用下面这个公式来计算：
假设服务器的逻辑CPU数是N 如果是IO密集型应用，那么线程数（核心线程数）会设置为2N 如果是CPU密集型应用，那么线程数（核心线程数）会设置为N+1 上述结论的具体推导可以百度一下，这里不再赘述。太大或太小的线程数都是不可取的，太小时无法充分利用多核的性能，而太大时会导致CPU大量开销在线程切换上，同样降低处理性能。
接下来，考虑CS架构中最为核心的一个组件，客户端连接池。一般来说，客户端连接池的底层是一个HTTP连接池，而在HTTP连接池中，下面的几个指标设置常常会直接影响服务性能
MAX_CONNECTION_TOTAL：连接池最大连接数，用于控制整个服务端集群可以提供的连接数量，当超过这个数量时，连接就会被拒绝。 ROUTE_MAX_COUNT：路由到某台主机的最大连接数。如果Max设置为800，集群中的主机数量为8，那么Route就可以设置为100，实现均分控制。当然具体的参数设置值与连接的负载均衡算法息息相关。 CONNECTION_REQUEST_TIME_OUT：从连接池中获取连接的超时时间，这个值需要根据服务端处理请求的具体时长进行调整。如果处理时长比较长，那么建议设置的大一些，避免连接获取失败。 CONNECTION_TIME_OUT：客户端和服务器建立连接的超时时间。正常的网络条件下，这个值一般而言都比较小，设置为3-5s即可。 READ_TIME_OUT：客户端从服务器读取数据的超时时间。这个值比较重要，是处理时长，根据服务情况设置。建议在测试时，从默认设置（一般是6s），逐步提升，得到最终的响应时间。不可设置过大或过小，过小则超时未获取到数据，过大则导致会一直当服务端异常时，连接无法释放。 CONNECTION_IDLE_TIME_OUT：连接空闲超时时间。 更加详细的连接池配置，参考连接池配置详解。 那么所谓线程池与连接池适配是什么意思呢？举个例子来说，如果线程池的核心线程数配置为256，那么同时最高会有256个线程去执行。此时，如果连接池数量配置为128，那么就意味着会有剩余128个线程处于无法获取到连接的状态，出现不断的切换。因此，建议在线程池与连接池的配置中，线程池数量小于等于连接池数量。
指标观测与参数调优 参数调优其实是一个相当枯燥的过程，需要不断的进行测试、修改参数这样的循环，最终找到一个临界点。在调优的过程中，针对指标的观测是验证参数调优好坏的关键。
指标观测，一般需要关注：CPU、IO、内存和网络，使用的工具包括：sar、iostat、nmon等等。如果测试过程中发现CPU负载始终维持在30% ～ 40%，那么就需要去检查程序中是不是限流控制的不对。如果观察到网络出现瓶颈，比如发送或者接收的包很大，达到网络带宽，那么就需要去调整发送的数据结构，或者调整发送的数据量。
实战 在实战环节中，讲2个最近做的案例，其中，案例1实现了TPS从200w到700w的飞跃，案例2实现了CPU负载从20%到80%的跳跃。
案例1 场景概述 项目实现数据生产并将数据推送至服务端，该过程中会打印数据推送的TPS。
在项目的初次测试中，发现整体的TPS维持在100w到200w左右（当然，这里需要比较强劲的服务器，我们使用的服务器是物理机，256个逻辑CPU，内存512G），无论怎么修改线程数或者对过程进行优化，整体TPS都没有比较大的提升。
优化点 这里的优化点就是大拆小，将数据拆分为400个一组的数据进行发送。最终实现了200w到700w的提升。
指标观测 测试过程中，重点关注了CPU和内存的变化，因为数据推送时并没有持久化到磁盘上。如果有落盘环节，那么IO也是需要重点关注的指标，使用sar -d可以很方便的观测。
另外，测试过程中自己编写了shell脚本，记录了全过程的CPU及内存变化，对于后续的指标实时监测，也是非常有帮助的。
案例2 场景概述 项目完成服务端数据进行查询，但是测试过程中发现，同时并发请求客户端时（使用jmeter或水平扩展分别请求），会直接导致连接池超时，将超时时间调长后同样会有该问题，且超时时间并未到达设置的时间。
分析问题后发现，在服务端需要完成多节点的数据merge操作，而超时会出现在merge中。
优化点 将线程池数量和连接池数量调小，因为当客户端水平扩展后，服务端集群单个节点无法再承载这么大的流量，直接导致无连接可用，返回超时。</content></entry><entry><title>读书笔记-半小时漫画经济学</title><url>https://yumc1991.github.io/blog.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%8D%8A%E5%B0%8F%E6%97%B6%E6%BC%AB%E7%94%BB%E7%BB%8F%E6%B5%8E%E5%AD%A6/</url><categories><category>读书笔记</category></categories><tags><tag>经济学</tag></tags><content type="html"> 引子：经济这个词是怎么来的呢？
经济这个词的英文是economy，这个词来源于古希腊。在中国，经济最早出现于东晋，是经世济民的简称。到了近代，由日本翻译过来后引入了中国。
近代大家严复曾经将economy翻译为"生计"，后来兜兜转转，&ldquo;经济"这个翻译最终占据了主流。
简介 这是《半小时漫画经济学》的第一本，书籍的整体脉络是：
简单介绍了经济学的发展史 详细谈了经济学中和我们生活息息相关的部分-五险一金 快速讲了讲消费心理学的内容，告诉我们如何识别一些“消费陷阱” 读完整本书，最大的收获是真真正正理解了五险一金的本质。
经济的发展史 总体而言，经济的发展经历了这么几个阶段：
原始经济 农业经济 工业经济 现代经济 其中，原始经济主要是“以物易物”为主。而伴随着生产力的发展和消费品的积累，经济也从农业经济，到工业经济，再到现代经济。
在经济的发展过程中，货币的诞生具有里程碑的意义。其不仅标志着“以物易物”时代的终结，也由于其便携性，让经济进入到快速发展阶段。
人人都要懂的“五险一金” 首先，我们谈谈“一金”，那就是大家都会非常关注的“住房公积金”。
住房公积金 住房公积金，顾名思义，就是用来买房的钱。这笔钱是这样产生的，由你个人提交一半，由公司提交一半。
一般来说，住房公积金需要关注以下2点：
基数 首先，需要明确，公积金缴纳总数 = 基数 * 缴纳比例 * 2。通常基数是工资。需要*2的原因是，个人缴纳一半，公司缴纳一半 因此，对于公积金而已，由于企业需要无偿提供另外一半，因此毫无疑问，个人缴纳部分越高越好 当然，基数并不是一定等于工资，也有不少公司不是按全额工资作为基数，而是会以当地最低标准作为基数，这些都需要非常关注 缴纳比例 缴纳比例通常情况下是12% 当然，由于各个公司情况不同，因此缴纳比例会有所不同。比如之前我在国企，缴纳比例是24% 对于住房公积金而言，其可用于买房、公积金贷款。鉴于现在的高房价，因此其是“五险一金”中最为重要的一部分！
既然说到了住房公积金，那么一定绕不开的就是买房这个话题了
买房须知 房屋，按照其性质，可以划分为3类：
自建房 保障性住房 商品房 其中，自建房是农村自留地所建房屋，无产权、土地使用证，因此不支持买卖，仅支持自住，是小产权房。
保障性住房，最常见的就是经济适用房，这类房屋是国家和个人共同拥有产权的，住满一定年限后归个人所有，因此也是支持买卖的。
最后，就是常见的商品房了。依据用地属性，商品房又被分为3类：
居住用地：70年产权 商业用地：40年产权 综合用地：50年产权 五险 包括：医疗、失业、养老、工伤和生育，5个部分，统称为“社保”。其中需要着重理解的是医疗和养老。
医疗保险 医保是由2部分构成，个人缴纳工资的2%，存入个人账户；公司缴纳工资的8%，存入统筹账户。
一般的门诊，会从个人账户中扣钱，当个人账户已经没有余额并且本年度个人自费金额达到一定数额时，会从统筹账户中扣钱（这项政策在各个省份会有所不同）。
而统筹账户，通常用于住院和大病治疗，因此也被称为大病统筹。
养老保险 养老保险，一般称为养老金，是个人从税前工资中扣除8%，公司再补充另8%计算的。养老保险，毫无疑问，是为了个人养老时使用的。那么，很明显，现在工作的年轻人所缴纳的养老金，都用来提供给当前领用养老金的退休人员了。
那么，这里，一定会产生一个问题，那就是30年后，钱贬值了，我年轻时缴纳的养老金不就缩水了吗？
答案是：养老金的领取是按照当前社会平均工资计算的，也就是说，领用时，也会随着社会总资产的变化而水涨船高。
养老金并不仅仅依靠人员缴纳组成（毕竟现在劳动力减少是不争的事实），还有很大一部分来自于国有企业的股权收益。
另外，对于国有企业而言，其还专门提供了一类职业养老金，这部分养老金也叫做企业年金
企业年金 企业年金是个人扣4%，公司扣8%，然后交给基金公司去理财，等到退休后即可领取。
消费心理学 最后，来聊聊有趣的消费心理学，学会了这些，能让你快速识别一些商家招式，做到见招拆招。
消费券： 最近，很多地方又开始发放消费券了。消费券拉动经济大家都了解，其具体是如何起作用的呢？
我们拿“满60-20”这样的常见额度来说，如果收到了这样一张20元的消费券，那么我们至少需要去消费60元。换言之，就是1:3的一个拉动比例。这样常见套路还经常在各类奥特莱斯中使用。
心理账户： 这个，通常情况下是使用各类情景带入，让人不自觉产生消费的冲动。比如当前最常见的“家装节”、“母婴节”等等，让你感觉自己是在为场景付款。
比例偏见： 这一条非常有趣。通常情况下，人们喜欢将数额换算成比例，来计算折扣力度。来看看下面2种场景：
原价100元的衣服，折扣10元
原价20元的书籍，折扣10元
消费者会将上述2种折扣方式，换算成比例，快速得出第二种打折50%，然后开始一通买买买。
类似的方式，商家还会以换购的方式展现。标价500元的围巾+标价50元的帽子：
买围巾，加1元换购帽子
买围巾送帽子
前者，消费者会很自然的将50元的帽子和1元换购费进行比例换算，而后者，则会让人将50元的帽子和500元的围巾进行对比。孰优孰略，一看便知。
价格锚点： 商家摆出，高、中、低，三种价位的商品，这个时候人们往往会去购买中档的商品。这就是让高、低两挡商品作为锚点进行对比。
收获及总结 更加详细的了解了五险一金，同时也学习了一些消费心理学。
总体而言，本书如其名，半小时可以快速读完，价值也基本在半小时的成本内。</content></entry><entry><title>读书笔记 半小时漫画经济学2</title><url>https://yumc1991.github.io/blog.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%8D%8A%E5%B0%8F%E6%97%B6%E6%BC%AB%E7%94%BB%E7%BB%8F%E6%B5%8E%E5%AD%A62/</url><categories><category>读书笔记</category></categories><tags><tag>经济学</tag></tags><content type="html"> 简介 这是《半小时漫画经济学》的第二本，这本书中着重就经济危机的产生、历史上有名的经济危机的发生及解决进行了介绍。
读完整本书，了解了一些经济学中的基本概念，同时更多的是对经济学的历史有了认识。
以史为鉴，可以知兴衰。
了解经济危机 3种融资方式 融资，依据其还款方式不同，可以分为3种：
对冲性融资
对冲性融资，这里的“对冲”二字，并不是我们经常所说的“控制风险”的对冲，而是说融资后可以偿还本金和利息
投机性融资
投机性融资，是在业界环境更好之后的一种表现，融资之后仅需偿还利息
庞氏融资
旁氏融资，是融资最高阶段。连利息也无需偿还。这是明斯基时刻的最高点。所谓明斯基时刻，是说经济都是有周期的，就像过山车一样。
危机的产生 那么，经济危机通常是怎么产生的呢？一般而言，有2种情况。
其一，是市场恐慌引起银行挤兑，导致银行/金融机构破产。一般来说，货币的发行要和金、银挂钩，如果出现货币超发情况，势必会导致市场上的货币贬值，也就是我们常说的通货膨胀情况的出现。在通货膨胀的背景下，物价飞涨，经济危机也就应运而生。
其二，是对未来预期过度乐观，导致大量借贷行为的发生。但是银行贷出去的钱，由于各种原因，并没有被成功的收回（比如投资到股市后货币蒸发）。大量违约的情况出现，也会导致经济危机。
金融泡沫 金融泡沫，是本书重点讲述的内容。以小故事的形式，讲述了几大金融泡沫的起因、发展和结局。
什么是金融泡沫 金融泡沫，简单来说就是有人给你讲了个故事，承诺你发财致富的梦想，你相信了这个故事，你把钱投资给了讲故事的人。结果到了最后，发现故事是一场骗局，一切都是泡沫，一触就破。
历史上那些有名的经济泡沫 历史上有3大泡沫，分别是「郁金香泡沫」、「南海泡沫」和「密西西比泡沫」，三场泡沫的主角呢，分别是荷兰、英国和法国。
郁金香泡沫 说到郁金香，毫无疑问主角是荷兰。作为欧洲马车夫和银行业的鼻祖，那个年代的荷兰可是非常之有钱，同时民众们也非常能赚钱。赚到了钱，就要想着怎么消费，荷兰人民最终的选择是，投资到了郁金香花上。
那个时候的郁金香还不像今天这么普遍，其花期很长，花朵很美的特点，深深的吸引着人们。于是乎，大家一股脑的拿钱去炒郁金香，炒郁金香的期货合同，也不搞实业，也不搞海运，以至于后来一朵郁金香花已经被炒到了天价。
直到，一次偶然的事件，一个船员不小心讲价值千金的郁金香花蕾当成普通果实实用，让很多人清醒了过来。于是大家伙纷纷开始抛售手里的郁金香，愈演愈烈，直到最后泡沫破裂。
南海泡沫 南海泡沫中的南海，不是我们国家的南海，而是指南美洲。
当时的中世纪欧洲几个大国之间经常尔虞我诈、动辄大打出手。英法两国之间为了争夺西班牙王位斗的不亦乐乎。
打仗，需要花钱，国库里没钱了，国家就只能向下面的人借钱。
彼时，哥伦布时代的余晖让很多欧洲人沉浸在发财的梦想当中，而神秘又遍布黄金的南美洲，无疑是大家心目当中的理想国。
发财梦每个人都有，这个时候就有人发现了商机。一个专门颁发南海通行证的机构诞生了。这个机构告诉人们，只要投资一笔资金，那么就可以拥有去南海发财的机会。
人们信以为真，纷纷拿出钱财，最终却成为了韭菜。
密西西比泡沫 密西西比河是美国一条有名的河流，马克吐温曾经写过《密西西比河上的生活》。关于密西西比泡沫，却是和法国有关。
由于连年战争，法国国库吃紧，这时候有个叫约翰大叔的人对国王说，我有办法空手套白狼。方法很简单，那就是告诉人们遥远的美洲遍地黄金，想要发财就来投资。
由于有国家背书，人们纷纷挤破头皮来投资。但是这部分钱并没有用来淘金，而是进了国王自己的口袋。当有人们来兑换时，这个泡沫不攻自破。
一些延伸出的有趣故事 泰罗制和福特制 随着工业时代的到来，人类社会的生产力得到了极大的提升。随之而来的，则是对工业化时代开启后，工人权利的不断探索。
在这一领域，德国走在了前面。铁血宰相俾斯麦提出了一系列保护工人权利的法案，其中包括工伤险和劳动险，这一制度催动了德国的快速发展，也最终成为今天五险一金的雏形。
而在大洋彼岸的美国，关于制度的探索也从未停止。为了能够更好的提升生成效率，泰罗提出了被称为“泰罗制”的一系列制度，其中包括细化分工、8小时工作制等等。
在此基础上，福特又将其进一步用在了汽车生产上，将原本需要高级工人才能组装完成的汽车，改造为流水线生产，大大加速了汽车生产的速度。以至于在20世纪20年代的美国，平均5个人就拥有1辆汽车。
美国的几次起飞时刻 关于美国的起飞，有几个事件不得不提。
旧金山金矿的发现 为了不让资产流向美国股市，欧洲诸国纷纷采取了加息策略。这样一来，金融资本大量外流，随之流出的还有作为货币后盾的黄金。
由于金本位的存在，黄金的外流直接导致美元贬值。
但可能冥冥之中自由天意，在最艰难的时刻，旧金山发现了金矿，于是乎，局势反转！
第二次世界大战 第二次世界大战前，美国经历了经济大萧条，在此期间，美国也迎来了2位总统，胡佛 &amp;&amp; 罗斯福。
而随着第二次世界大战的发生，美国一方面作为出口国，不断的向欧洲诸国出口装备，赚的盆满钵满。另一方面，随着最后的参战成为战胜方，美国也收获了政治上的权利，最终走向巅峰，至今。～</content></entry><entry><title>关于我</title><url>https://yumc1991.github.io/blog.github.io/about.html</url><categories/><tags/><content type="html"> 个人爱好 喜欢各类体育运动 喜欢读书，唐宋文学、人物传记、经济学 博客精神 好的想法值得分享和传播 近期内容预告 Flink精读 个人阅读</content></entry></search>